{
	"info": {
		"_postman_id": "151e8b81-6508-4c17-8dcf-76fe6a99a744",
		"name": "Talpa Payment Experience API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Payment Methods 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response contains payment methods\", function () {",
							"    var data = pm.response.json();",
							"    pm.expect(data).to.not.empty",
							"});",
							"pm.test(\"Response first item contains name\", function () {",
							"    var data = pm.response.json();",
							"    pm.expect(data[0].name).to.exist",
							"});",
							"pm.test(\"Response first item name is not empty\", function () {",
							"    var data = pm.response.json();",
							"    pm.expect(data[0].name).to.not.empty",
							"});",
							"pm.test(\"Response first item contains code\", function () {",
							"    var data = pm.response.json();",
							"    pm.expect(data[0].code).to.exist",
							"});",
							"pm.test(\"Response first item code is not empty\", function () {",
							"    var data = pm.response.json();",
							"    pm.expect(data[0].code).to.not.empty",
							"});",
							"pm.test(\"Response first item contains group\", function () {",
							"    var data = pm.response.json();",
							"    pm.expect(data[0].group).to.exist",
							"});",
							"pm.test(\"Response first item group is not empty\", function () {",
							"    var data = pm.response.json();",
							"    pm.expect(data[0].group).to.not.empty",
							"});",
							"pm.test(\"Response first item contains image\", function () {",
							"    var data = pm.response.json();",
							"    pm.expect(data[0].img).to.exist",
							"});",
							"pm.test(\"Response first item image is not empty\", function () {",
							"    var data = pm.response.json();",
							"    pm.expect(data[0].img).to.not.empty",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const url = pm.variables.get(\"orderExperienceUrl\")",
							"pm.sendRequest({",
							"    url: `${url}`,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(",
							"            {",
							"                \"namespace\": \"asukaspysakointi\",",
							"                \"user\": pm.variables.replaceIn('{{$randomUserName}}'),",
							"                \"priceNet\": \"200\",",
							"                \"priceVat\": \"48\",",
							"                \"priceTotal\": \"248\",",
							"                \"items\": [",
							"                    {",
							"                        \"productId\": pm.variables.get('productFound'),",
							"                        \"quantity\": 2,",
							"                        \"productName\": \"Product Name\",",
							"                        \"unit\": \"pcs\",",
							"                        \"rowPriceNet\": \"200\",",
							"                        \"rowPriceVat\": \"48\",",
							"                        \"rowPriceTotal\": \"248\"",
							"                    }",
							"                ],",
							"                \"customer\": {",
							"                    \"firstName\": pm.variables.get('testCustomerFirstName'),",
							"                    \"lastName\": pm.variables.get('testCustomerLastName'),",
							"                    \"email\": pm.variables.get('testCustomerEmail'),",
							"                    \"telephone\": \"0401231233\"",
							"                }",
							"            })",
							"    }",
							"}, function (err, res) {",
							"    const orderId = res.json().orderId",
							"    if (orderId) {",
							"        console.log('Set orderFound variable to '+orderId)",
							"        pm.environment.set('orderFound', orderId)",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{paymentExperienceUrl}}/:orderId/paymentMethods",
					"host": [
						"{{paymentExperienceUrl}}"
					],
					"path": [
						":orderId",
						"paymentMethods"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderFound}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Payment 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();",
							"var requestData = JSON.parse(pm.request.body);",
							"/*",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response contains correct mapped ID\", function () {",
							"    pm.expect(data.productId).to.eql(pm.variables.get(\"productFound\"));",
							"});",
							"pm.test(\"Response contains correct namespace\", function () {",
							"    pm.expect(data.namespace).to.eql(requestData.namespace);",
							"});",
							"pm.test(\"Response contains correct namespace entity ID\", function () {",
							"    pm.expect(data.namespaceEntityId).to.eql(requestData.namespaceEntityId);",
							"});*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"namespace\": \"{{namespace}}\",\n    \"namespaceEntityId\": \"{{namespaceProductFound}}\",\n    \"name\": \"Some Product Name\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{paymentExperienceUrl}}",
					"host": [
						"{{paymentExperienceUrl}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}